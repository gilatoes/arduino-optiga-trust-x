/**
 * MIT License
 *
 * Copyright (c) 2018 Infineon Technologies AG
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE
 *
 * Demonstrates use of the 
 * Infineon Technologies AG OPTIGA™ Trust X Arduino library
 */

#include "OPTIGATrustX.h"
#include "debug.h"


uint8_t sys_init =0;

void setup() 
{
  uint32_t ret = 0;
  
  /*
   * Initialise a serial port for debug output
   */
  Serial.begin(115200, SERIAL_8N1);
  Serial.println("Initializing ... ");
 
 /*
   * Initialise an OPTIGA™ Trust X Board
   */
  if(reset()==0){
    sys_init=1;
  }else{
    sys_init=0;
  }

}

void loop()
{
  uint32_t ret = 0;
  uint8_t  nvm_big[1500];
  uint16_t ServerTrustAnchor_OID = 0xE0EF;

unsigned char RootCA[] = {
  0x30, 0x82, 0x02, 0x55, 0x30, 0x82, 0x01, 0xfc, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x09, 0x00, 0xbc, 0x11, 0xc9, 0x56, 0x49, 0x41, 0x13, 0x1e,
  0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02,
  0x30, 0x7e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
  0x02, 0x53, 0x47, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x08,
  0x0c, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x6f, 0x72, 0x65, 0x31,
  0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x53, 0x69,
  0x6e, 0x67, 0x61, 0x70, 0x6f, 0x72, 0x65, 0x31, 0x1e, 0x30, 0x1c, 0x06,
  0x03, 0x55, 0x04, 0x0a, 0x0c, 0x15, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x65,
  0x6f, 0x6e, 0x20, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
  0x69, 0x65, 0x73, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b,
  0x0c, 0x03, 0x44, 0x53, 0x53, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55,
  0x04, 0x03, 0x0c, 0x10, 0x54, 0x72, 0x75, 0x73, 0x74, 0x58, 0x42, 0x6f,
  0x6f, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d,
  0x31, 0x38, 0x31, 0x30, 0x33, 0x30, 0x30, 0x36, 0x32, 0x32, 0x30, 0x34,
  0x5a, 0x17, 0x0d, 0x33, 0x38, 0x31, 0x30, 0x32, 0x35, 0x30, 0x36, 0x32,
  0x32, 0x30, 0x34, 0x5a, 0x30, 0x7e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
  0x55, 0x04, 0x06, 0x13, 0x02, 0x53, 0x47, 0x31, 0x12, 0x30, 0x10, 0x06,
  0x03, 0x55, 0x04, 0x08, 0x0c, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x61, 0x70,
  0x6f, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07,
  0x0c, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x6f, 0x72, 0x65, 0x31,
  0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x15, 0x49, 0x6e,
  0x66, 0x69, 0x6e, 0x65, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x63, 0x68, 0x6e,
  0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x31, 0x0c, 0x30, 0x0a, 0x06,
  0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x44, 0x53, 0x53, 0x31, 0x19, 0x30,
  0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x54, 0x72, 0x75, 0x73,
  0x74, 0x58, 0x42, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x41,
  0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
  0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
  0x42, 0x00, 0x04, 0x58, 0x9b, 0x16, 0x73, 0x09, 0xa4, 0x4c, 0x34, 0x1a,
  0x4a, 0xb5, 0x5d, 0x6b, 0x2c, 0xe5, 0xf6, 0x1b, 0xcb, 0x97, 0x7c, 0x48,
  0x96, 0xed, 0xe6, 0x4e, 0x17, 0x8d, 0x2b, 0x49, 0x17, 0x5f, 0xff, 0xd2,
  0xb2, 0x94, 0x82, 0x93, 0xfa, 0x50, 0x38, 0x59, 0xe1, 0xd6, 0x13, 0xe5,
  0xbd, 0xa0, 0xa0, 0xef, 0x34, 0x39, 0x88, 0x26, 0x1e, 0xd6, 0xac, 0xd0,
  0x2b, 0x21, 0x04, 0x18, 0x0a, 0x91, 0xca, 0xa3, 0x63, 0x30, 0x61, 0x30,
  0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xd3, 0x09,
  0xe1, 0x15, 0x89, 0x82, 0x3e, 0x00, 0xba, 0xf3, 0xf9, 0xcf, 0x58, 0x15,
  0xb7, 0xc5, 0xe6, 0xff, 0x8b, 0x84, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d,
  0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xd3, 0x09, 0xe1, 0x15, 0x89,
  0x82, 0x3e, 0x00, 0xba, 0xf3, 0xf9, 0xcf, 0x58, 0x15, 0xb7, 0xc5, 0xe6,
  0xff, 0x8b, 0x84, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01,
  0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03,
  0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02, 0x04,
  0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02,
  0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x04, 0x2d, 0xd5, 0x73, 0x0c,
  0x11, 0xff, 0x0a, 0xb0, 0x91, 0x09, 0xcd, 0xd4, 0xf3, 0x77, 0x1f, 0xe3,
  0x54, 0xa2, 0x27, 0xb1, 0xbd, 0x0d, 0x5a, 0x7d, 0x8c, 0xe8, 0xfc, 0x95,
  0x2f, 0x4a, 0xae, 0x02, 0x20, 0x23, 0x2c, 0x54, 0x57, 0x65, 0xf3, 0x87,
  0x81, 0x6d, 0x04, 0x7f, 0x11, 0x34, 0x6e, 0x44, 0x37, 0x06, 0xff, 0x2f,
  0x45, 0x8f, 0x1b, 0x97, 0x8d, 0x37, 0x1a, 0x9b, 0x00, 0x1a, 0xe9, 0x4b,
  0x98
};
uint16_t RootCA_Len = 601;

  if(sys_init)
  {    
#if 1 
    Serial.println("Write Trust Anchor into Trust X");
    ret = trustX.setArbitaryDataObject(ServerTrustAnchor_OID, RootCA, RootCA_Len);
    if (ret) 
    {  
       Serial.println("Error: Failed to write Trust Anchor");
    }
#else
  if (0)    
  {}
#endif    
    else
    {    
      Serial.println("Read back Trust Anchor into Trust X");
     
      ret = trustX.getArbitaryDataObject(ServerTrustAnchor_OID, nvm_big, RootCA_Len);
      if (ret) 
      {  
         Serial.println("Error: Failed to read Trust Anchor");
        Serial.println(ret, HEX);
      }
      else{      
        HEXDUMP(nvm_big, RootCA_Len);
      }
    }
  }
  
  Serial.println("\r\nPress i to re-initialize.. other key to loop...");   
  while (Serial.available()==0){} //Wait for user input  
  String input = Serial.readString();  //Reading the Input string from Serial port.
  input.trim();
  if(input=="i") 
  {
    if(reset()!=0)
    {
      //Do not execute
      sys_init=0;
      //close the connection
      trustX.end();
    }else
    {
      sys_init=1;
      }
  }
}


uint8_t reset()
{
  uint32_t ret = 0;   
  Serial.println("Initialize Trust X");
  ret = trustX.begin();
  if (ret) {
    Serial.println("Failed");
    return -1;   
  }
  Serial.println("OK");
  
   /*
   * Speedup the board (from 6 mA to 15 mA)
   */
  Serial.println("Limiting Current consumption (15mA - means no limitation)");
  ret = trustX.setCurrentLimit(15);
  if (ret) {
     Serial.println("Failed");
    return -1;
  }
  Serial.println("OK");

  return 0;
}

